/*
Time Complexity: O(lmn), m= number of minutes, n*l-> grid dimensions

Space Complexiyt: O(1)

LeetCode : successfull
Runtime: 1 ms, faster than 100.00% of Java online submissions for Rotting Oranges.
Memory Usage: 39.4 MB, less than 81.25% of Java online submissions for Rotting Oranges.

Approach:

get count of fresh, rotten, empty cells.

check base condition i.e if fresh == 0 or lastfresh (value of fresh in last recursive call) = current fresh also convert 3 to 2;

[means that there was no change in fresh count, so we can not move further]

mutate the array
put fresh cell value as 3 if it is near rotten orange.



*/


class Solution {
    int minutes;
    public int orangesRotting(int[][] grid) {
        
        minutes=0;
        return recursiveCheck(grid,0);
       // return minutes;
    }
    
   int recursiveCheck(int[][] grid,int lastFresh)
    {
        
        // for each minute
        
        int localMin=0;
        int localFresh=0;
        int localEmpty=0;
        int localRotten=0;
    
        // check
       int i,j;
       i=0;
       j=0;
        for( i=0;i<grid.length;i++)
        {
            for( j=0;j<grid[0].length;j++)
            {
                if(grid[i][j]==0) localEmpty++;
                
                if(grid[i][j]==1) localFresh++;
                
                if(grid[i][j]==2) localRotten++;
                if(grid[i][j]==3) {
                    grid[i][j]=2;
                    localRotten++;
                }
            }
        }
       
        
        if(localFresh==0) return minutes;
        if(lastFresh==localFresh) return -1;
        if(localRotten==0) return -1;
        if(localEmpty==(i*j)) return -1;
       
   //    System.out.printf(" %d   %d  %d  %d \n \n ",localFresh,localEmpty,localRotten,minutes);
        minutes++;
        
        //if no more fresh orange left return munutes
        //if no rotten oranges return 0
        //if no oranges return 0;
        
        //convert
    //    int i,j;
        for( i=0;i<grid.length;i++)
        {
            for( j=0;j<grid[0].length;j++)
            {
              //  if(grid[i][j]==0) localEmpty++;
                
              //  if(grid[i][j]==1) localFresh++;
                
                if(grid[i][j]==2)
                {
                    if(i-1>=0 && grid[i-1][j]==1) grid[i-1][j] =3;
                    if(j-1>=0&& grid[i][j-1]==1) grid[i][j-1] =3;
                    if(j+1<grid[0].length&& grid[i][j+1]==1) grid[i][j+1] =3;
                    if(i+1<grid.length&& grid[i+1][j]==1) grid[i+1][j] =3;
                    
                }
                
            }
        }
        
        return recursiveCheck(grid,localFresh);
        
    }
}
