// could not come up with correct algorithm

/*
// Employee info
class Employee {
    // It's the unique id of each node;
    // unique id of this employee
    public int id;
    // the importance value of this employee
    public int importance;
    // the id of direct subordinates
    public List<Integer> subordinates;
};
*/
class Solution {
    HashMap<Integer,Integer> importance;
    public int getImportance(List<Employee> employees, int id) {
        
        importance = new HashMap<>();
      /*  
        for(int i=0;i<2000;i++)
            checkNoSub(employees,i);
        */
   
         checkNoSub(employees,0);
         checkQueue(employees);
        
        return importance.get(id);
    }
    
   void checkNoSub(List<Employee> employees,int maxSub)
    {
        for(int i=0;i<employees.size();i++)
        {
            Employee temp=employees.get(i);
            if(temp.subordinates.size()==maxSub)
            {
                
                importance.put(temp.id,temp.importance);
                q.add(temp.id);
                
                    
                if(maxSub==0) continue;
                for(int j=0;j<maxSub;j++)
                {
                    importance.put(temp.id,importance.get(temp.id)+importance.get(temp.subordinates.get(j)));
                }
                    
 
                    
            }
            }
           
        }
    void checkQueue(List<Empl>)
    {
        whlie(q.size>0)
        {
            Employee temp=q.poll();
            
            
            
            
            for(int i=0;i<employees.size();i++)
            {
                Employee temp=employees.get(i);
                if(temp.subordinates.size()==maxSub)
                {

                    importance.put(temp.id,temp.importance);
                    q.add(temp.id);


                    if(maxSub==0) continue;
                    for(int j=0;j<maxSub;j++)
                    {
                        importance.put(temp.id,importance.get(temp.id)+importance.get(temp.subordinates.get(j)));
                    }



                }
                }

        }
    }
    
}
